openapi: 3.0.1
info:
  title: Hubby API
  description: |
    Welcome to the Hubby API documentation. This API enables partners to seamlessly integrate eSIM booking and management capabilities into their applications.
    
    Key Features:
    - Create and manage eSIM bookings for your customers
    - Access our global package catalog with country-specific offerings
    - Manage traveler information and communication preferences
    - Track booking statuses and package activations
    
    Authentication:
      All API requests require a valid API key in the Authorization header. Contact our support team to obtain your API credentials.
    
    Environment URLs:
    - Production: https://docs.hubby.dev/
    
    Need Help?
    - Technical Support: support@hubbyesim.com
  version: 1.1.0

paths:
  /api/bookings:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: List all bookings
      description: Retrieves a paginated list of bookings for the authenticated partner
      parameters:
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of records to return per page
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number to retrieve
      responses:
        "200":
          description: A paginated list of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Booking"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        description: Current page number
                      totalPages:
                        type: integer
                        description: Total number of pages available
                      perPage:
                        type: integer
                        description: Number of items per page
                      totalItems:
                        type: integer
                        description: Total number of items in the collection
                      hasNextPage:
                        type: boolean
                        description: Indicates if there is a next page
                      hasPrevPage:
                        type: boolean
                        description: Indicates if there is a previous page
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"
    
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Create a new booking
      description: Creates a new booking with the specified details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - departure_date
                - return_date
                - communication_options
                - package_specifications
              properties:
                departure_date:
                  type: string
                  format: date-time
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  pattern: '^\+\d{1,3}\d{1,14}$'
                first_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                last_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                full_name:
                  type: string
                  minLength: 1
                  maxLength: 200
                title:
                  type: string
                  enum: ['mr.', 'ms.', 'mrs.', 'miss', 'dr.', 'prof.']
                pax:
                  type: integer
                  minimum: 1
                return_date:
                  type: string
                  format: date-time
                flight_number:
                  type: string
                  pattern: '^[a-zA-Z0-9]{1,10}$'
                gender:
                  type: string
                  enum: ['M', 'F', 'O']
                date_of_birth:
                  type: string
                  format: date-time
                data:
                  type: object
                locale:
                  type: string
                  minLength: 2
                  maxLength: 5
                booking_id:
                  type: string
                  minLength: 3
                communication_options:
                  type: object
                  required:
                    - should_send_message
                  properties:
                    should_send_message:
                      type: boolean
                    channels:
                      type: array
                      items:
                        type: string
                        enum: ['EMAIL', 'PUSH', 'SMS', 'WHATSAPP']
                package_specifications:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      package_id:
                        type: string
                      destination:
                        type: string
                        pattern: '^[A-Z]{2,3}$'
                      iata_code:
                        type: string
                        pattern: '^[A-Z]{2,3}$'
                      size:
                        type: string
                        pattern: '^[1-9]\d*(MB|GB)$'
                    oneOf:
                      - required: ['package_id']
                      - required: ['destination']
                      - required: ['iata_code']
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/ValidationErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/bookings/{id}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Get booking details
      description: Retrieves details of a specific booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"
    
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Update booking
      description: Updates an existing booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "400":
          $ref: "#/components/responses/ValidationErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Delete booking
      description: Deletes a specific booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/bookings/byBookingId/{id}:
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Delete booking by booking ID
      description: Deletes a booking using its external booking ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: External booking ID
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/bookings/generateNewPackages/{externalId}:
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Booking
      summary: Generate new packages for booking
      description: Generates new packages for an existing booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: External booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - package_specifications
              properties:
                package_specifications:
                  type: array
                  items:
                    $ref: "#/components/schemas/PackageSpecification"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "400":
          $ref: "#/components/responses/ValidationErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"



  /api/packages:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Package
      summary: List all packages
      description: Retrieves a list of all available packages
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Package
      summary: Create a new package
      description: Creates a new package with the specified details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - size
                - iso
                - days
                - price
              properties:
                size:
                  type: string
                  example: "500MB"
                iso:
                  type: string
                  example: "NLD"
                days:
                  type: number
                  example: 30
                price:
                  type: number
                  example: 29.99
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/ValidationErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/packages/{id}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Package
      summary: Get package details
      description: Retrieves details of a specific package
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Package ID
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/countries/packages:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Package
      summary: Get all packages grouped by country
      description: Retrieves all packages grouped by their respective countries
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"

  /api/countries/{country}/packages:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Package
      summary: Get packages for specific country
      description: Retrieves all packages for a specific country
      parameters:
        - name: country
          in: path
          required: true
          schema:
            type: string
          description: Country ISO code
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"



  /api/countries:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Country
      summary: List all countries
      description: Retrieves a list of all available countries
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"



components:
  schemas:
    Booking:
      type: object
      required:
        - departure_date
        - return_date
        - communication_options
        - package_specifications
      properties:
        departure_date:
          type: string
          format: date-time
          description: Departure date in ISO format
          example: "2024-12-12"
        email:
          type: string
          format: email
          description: Email address of the booking contact
          example: "example@hubbyesim.com"
        phone:
          type: string
          description: Phone number with country code
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          description: First name of the passenger
          example: "Hubby"
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          description: Last name of the passenger
          example: "Van Dijk"
        full_name:
          type: string
          minLength: 1
          maxLength: 200
          description: Full name of the passenger
          example: "Hubby Van Dijk"
        title:
          type: string
          enum: ["mr.", "ms.", "mrs.", "miss", "dr.", "prof."]
          description: Title of the passenger
        pax:
          type: integer
          minimum: 1
          description: Number of passengers
          example: 12
        return_date:
          type: string
          format: date-time
          description: Return date in ISO format, must be after departure date
          example: "2024-12-20"
        gender:
          type: string
          enum: ["M", "F", "O"]
          description: Gender of the passenger
        date_of_birth:
          type: string
          format: date-time
          description: Date of birth of the passenger, must be a past date
        data:
          type: object
          description: Additional data associated with the booking
        locale:
          type: string
          minLength: 2
          maxLength: 5
          description: Locale of the booking
          example: "en-GB"
        booking_id:
          type: string
          minLength: 3
          description: ID of the booking
        communication_options:
          type: object
          required:
            - should_communicate
          properties:
            should_communicate:
              type: boolean
              description: Indicates if communication is enabled
            channels:
              type: array
              items:
                type: string
                enum: ["EMAIL", "PUSH", "SMS", "WHATSAPP"]
              description: List of communication channels
              example: ["EMAIL"]
        package_specifications:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/PackageSpecification"
          description: Array of package specifications for the booking
          example:
            - size: "3GB"
              destination: "US"
            - package_id: "123123"
            - destination: "NLD"
      anyOf:
        - required: ["email"]
        - required: ["booking_id"]
    PackageSpecification:
      type: object
      properties:
        package_id:
          type: string
          description: ID of the package, used to directly select the package
          example: "123123"
        destination:
          type: string
          pattern: "^[A-Z]{2,3}$"
          description: ISO2, ISO3, or continent code for the destination
          example: "US"
        size:
          type: string
          pattern: '^\d+(MB|GB)$'
          description: Size of the package, e.g., '500MB' or '3GB'
          example: "3GB"
      anyOf:
        - required: ["package_id"]
        - required: ["destination"]
      not:
        required: ["package_id", "size"]
      description: >
        Package specification details. If `package_id` is set, the package is directly selected.
        If `destination` and `size` are set, the appropriate package will be determined based on these parameters.
        If only `destination` is set, a strategy will be applied based on the partner's implementation to determine the correct package.
    BookingResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the booking was created successfully
        data:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier of the booking
            title:
              type: string
              description: Title of the passenger
            first_name:
              type: string
              description: First name of the passenger
            last_name:
              type: string
              description: Last name of the passenger
            full_name:
              type: string
              description: Full name of the passenger
            pax:
              type: integer
              description: Number of passengers
            email:
              type: string
              format: email
              description: Email address of the booking contact
            phone:
              type: string
              nullable: true
              description: Phone number of the booking contact
            booking_id:
              type: string
              nullable: true
              description: ID of the booking
            return_date:
              type: string
              format: date-time
              description: Return date in ISO format
            partner:
              type: string
              description: Partner ID associated with the booking
            departure_date:
              type: string
              format: date-time
              description: Departure date in ISO format
            gender:
              type: string
              enum: ["M", "F", "O"]
              description: Gender of the passenger
            users:
              type: array
              items:
                type: object
              description: List of users associated with the booking
            esims:
              type: array
              items:
                type: object
              description: List of eSIMs associated with the booking
            locale:
              type: string
              description: Locale of the booking
            data:
              type: object
              properties:
                source:
                  type: string
                  description: Source of the booking, e.g., 'web'
                manual:
                  type: boolean
                  description: Indicates if the booking was created manually
            communication_options:
              type: object
              properties:
                should_send_message:
                  type: boolean
                  description: Indicates if messages should be sent
                channels:
                  type: array
                  items:
                    type: string
                    enum: ["EMAIL", "PUSH", "SMS", "WHATSAPP"]
                  description: List of communication channels
            created_at:
              type: string
              format: date-time
              description: Creation timestamp of the booking
            updated_at:
              type: string
              format: date-time
              description: Last update timestamp of the booking
            created_by:
              type: string
              description: Identifier of the entity that created the booking
            updated_by:
              type: string
              description: Identifier of the entity that last updated the booking
            promo_codes:
              type: array
              items:
                type: object
                properties:
                  promo_code:
                    type: string
                    description: Promo code applied to the booking
                  package_id:
                    type: string
                    description: ID of the package associated with the promo code
                  package_size:
                    type: string
                    description: Size of the package associated with the promo code
                  destination:
                    type: string
                    description: Destination associated with the promo code
        message:
          type: string
          description: Response message
    Country:
      type: object
      properties:
        code:
          type: string
          description: ISO country code
          example: "NLD"
        name:
          type: string
          description: Country name
          example: "Netherlands"
        continent:
          type: string
          description: Continent code
          example: "EU"
    Package:
      type: object
      properties:
        id:
          type: string
          example: "1054686"
        label:
          type: string
          example: "500.17 MB"
        bytes:
          type: integer
          example: 500170752
        country:
          type: string
          example: "XS"
        price:
          type: number
          format: float
          example: 0
        customerPrice:
          type: number
          format: float
          example: 8.7
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Fixed API token for authentication be sure to include the word `Bearer` followed by a space and the token
  SuccessResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      message:
        type: string
        description: Optional success message
      data:
        type: object
        description: Main data payload
      pagination:
        $ref: "#/components/schemas/PaginationMeta"
        description: Optional pagination metadata
  ErrorResponse:
    type: object
    properties:
      success:
        type: boolean
        example: false
      error:
        type: object
        properties:
          code:
            type: integer
            description: HTTP status code of the error
          message:
            type: string
            description: Error message detailing the issue
          details:
            type: object
            nullable: true
            description: Optional additional error details
  PaginationMeta:
    type: object
    properties:
      currentPage:
        type: integer
        description: Current page number
      totalPages:
        type: integer
        description: Total number of pages available
      perPage:
        type: integer
        description: Number of items per page
      totalItems:
        type: integer
        description: Total number of items in the collection
      hasNextPage:
        type: boolean
        description: Indicates if there is a next page
      hasPrevPage:
        type: boolean
        description: Indicates if there is a previous page
  responses:
    SuccessResponse:
      description: Request was successful
      content:
        application/json:
          schema:
            $ref: "#/components/SuccessResponse"
    NotFoundErrorResponse:
      description: Resource or entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/ErrorResponse"
    ValidationErrorResponse:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/ErrorResponse"
    UnauthorizedErrorResponse:
      description: Authorization failed
      content:
        application/json:
          schema:
            $ref: "#/components/ErrorResponse"
    ForbiddenErrorResponse:
      description: Access rights are insufficient
      content:
        application/json:
          schema:
            $ref: "#/components/ErrorResponse"
    ServerErrorResponse:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/ErrorResponse"