openapi: 3.0.1
info:
  title: Hubby API
  version: 1.1.0
  description: |
    Welcome to the Hubby API documentation. This API enables partners to seamlessly integrate eSIM booking and management capabilities into their applications.
    
    Key Features:
    - Create and manage eSIM bookings for your customers
    - Access our global package catalog with country-specific offerings
    - Track booking statuses and package activations
    
    Authentication:
    All API requests must include the following headers:
    - x-api-key: Your public API key
    - x-timestamp: Current Unix timestamp in seconds
    - x-signature: HMAC-SHA256 signature
    
    The HMAC signature must be generated for each request using:
    1. Concatenate: timestamp + HTTP method + request path
       Example: "1678901234GET/api/bookings"
    2. Generate HMAC-SHA256 using your secret key
    3. Convert to hex string
    
    Note: Swagger UI cannot be used to test the API directly as each request requires a unique HMAC signature.
    Please implement the authentication in your client application.

    Example Node.js Implementation:
    ```javascript
    const cryptoJs = require('crypto-js');

    // Configuration values that would normally come from environment
    const secretKey = "YOUR_API_SECRET";
    const publicKey = "YOUR_API_KEY";
    const baseUrl = "YOUR_BASE_URL";

    // Function to generate headers for API request
    function generateApiHeaders(method, path) {
        //Timestamp is in milliseconds e.g. 1715558400000
        const timestamp = Math.floor(Date.now()).toString();

        // Ensure url is a string
        let path = String(url);

        // Remove baseUrl from the url if present
        path = processedUrl.replace(baseUrl, '');

        // Create query string if needed
        const queryString = new URL(url).search;
        if (queryString) {
            processedUrl += queryString;
        }

        // Validate public key
        if (!publicKey) {
            throw new Error("Public key is required");
        }

        // Create the payload
        // Sample payload: 1715558400000GET/api/bookings?bookingId=1234567890
        const payload = timestamp + method + path;

        // Generate the HMAC signature
        const signature = cryptoJs.HmacSHA256(payload, secretKey).toString(cryptoJs.enc.Hex);

        // Return headers object
        return {
            'x-timestamp': timestamp,
            'x-signature': signature,
            'x-api-key': publicKey,
            'Accept': 'application/json'
        };
    }
    ```
    
    Need Help?
    - Technical Support: support@hubbyesim.com

servers:
- url: api.hubby.dev
  description: Production server
- url: api-acc.hubby.dev
  description: Acceptance server

  
paths:
  /api/bookings:
    get:
      tags:
        - Booking
      summary: List all bookings
      description: |
        Retrieves a paginated list of bookings for the authenticated partner.
        The response is always fresh and not cached (uses Cache-Control headers).
      parameters:
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of records to return per page (minimum 1)
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (use nextCursor/prevCursor from previous response)
      responses:
        "200":
          description: A paginated list of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookingResponse"
                  pagination:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
    
    post:
      tags:
        - Booking
      summary: Create a new booking
      description: Creates a new booking with the specified details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - departure_date
                - package_specifications
              properties:
                departure_date:
                  type: string
                  format: date-time
                  description: |
                    ISO 8601 departure date. Example: '2024-12-01T00:00:00Z'.
                return_date:
                  type: string
                  format: date-time
                  description: |
                    ISO 8601 return date. Must be after `departure_date`.
                    Optional if not provided by the partner.
                email:
                  type: string
                  format: email
                  description: |
                    Traveler's email. Required if `booking_id` is not provided.
                booking_id:
                  type: string
                  minLength: 3
                  description: |
                    Booking ID. Required if `email` is not provided.
                phone:
                  type: string
                  pattern: '^\+\d{1,3}\d{1,14}$'
                  description: Phone number in E.164 format (e.g., +123456789).
                first_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                last_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                full_name:
                  type: string
                  minLength: 1
                  maxLength: 200
                title:
                  type: string
                  enum: ['mr.', 'ms.', 'mrs.', 'miss', 'dr.', 'prof.']
                pax:
                  type: integer
                  minimum: 1
                  description: Number of passengers.
                flight_number:
                  type: string
                  pattern: '^[a-zA-Z0-9]{1,10}$'
                gender:
                  type: string
                  enum: ['M', 'F', 'O']
                date_of_birth:
                  type: string
                  format: date-time
                  description: Date of birth in ISO 8601 format.
                locale:
                  type: string
                  minLength: 2
                  maxLength: 5
                  description: Locale or language code (e.g., "en", "nl").
                data:
                  type: object
                  description: Additional metadata about the booking.
                communication_options:
                  type: object
                  description: |
                    Optional communication preferences for sending messages.
                  properties:
                    should_send_message:
                      type: boolean
                      description: Indicates if messages should be sent.
                    channels:
                      type: array
                      items:
                        type: string
                        enum: ['EMAIL', 'PUSH', 'SMS', 'WHATSAPP']
                      description: List of communication channels.
                package_specifications:
                  type: array
                  minItems: 1
                  description: |
                    A list of package specifications. At least one entry is required, and each entry must include a `destination`.
                  items:
                    type: object
                    required:
                      - destination
                    properties:
                      destination:
                        type: string
                        pattern: '^[A-Z]{2,3}$'
                        description: |
                          Destination code (ISO 2-3 uppercase letters).
                          Example: 'US', 'NL'.
                      size:
                        type: string
                        pattern: '^\d+(MB|GB)$'
                        description: Package size (e.g., "1GB" or "500MB").
                      package_id:
                        type: string
                        description: Identifier for the package (optional).

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookingResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/bookings/{id}:
    get:
      tags:
        - Booking
      summary: Get booking details
      description: Retrieves details of a specific booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    $ref: "#/components/schemas/BookingResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
    
    put:
      tags:
        - Booking
      summary: Update booking
      description: Updates an existing booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: object
                    description: Empty object on successful update
                    example: {}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    delete:
      tags:
        - Booking
      summary: Delete booking
      description: Deletes a specific booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: object
                    description: Empty object
                    example: {}
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/bookings/{id}/byExternalBookingId:
    delete:
      tags:
        - Booking
      summary: Delete booking by booking ID
      description: Deletes a booking using its external booking ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: External booking ID (booking_id)
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: object
                    description: Empty object
                    example: {}
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/bookings/generateNewPackages/{id}:
    put:
      tags:
        - Booking
      summary: Generate new promo codes for booking
      description: |
        Generates new promo codes for an existing booking based on the provided package specifications.
        The booking is identified by its external booking ID (booking_id).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: External booking ID (booking_id)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - package_specifications
              properties:
                package_specifications:
                  type: array
                  items:
                    $ref: "#/components/schemas/PackageSpecification"
                  description: List of package specifications for generating promo codes
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    $ref: "#/components/schemas/BookingResponse"
        "400":
          description: Validation error in package specifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "404":
          description: Booking not found with the provided external ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"



  /api/packages:
    get:
      tags:
        - Package
      summary: List all packages
      description: Retrieves a list of all available packages
      parameters:
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of records to return per page (minimum 1)
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (use nextCursor/prevCursor from previous response)
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PackageResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/packages/{id}:
    get:
      tags:
        - Package
      summary: Get package details
      description: Retrieves details of a specific package
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Package ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PackageResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/countries/packages:
    get:
      tags:
        - Package
      summary: Get all packages grouped by country
      description: Retrieves all packages grouped by their respective countries
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagesGroupedByCountryResponse'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /api/countries/{country}/packages:
    get:
      tags:
        - Package
      summary: Get packages for specific country
      description: Retrieves all packages for a specific country
      parameters:
        - name: country
          in: path
          required: true
          schema:
            type: string
          description: Country ISO code
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagesGroupedBySingleCountryResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"



  /api/countries:
    get:
      tags:
        - Country
      summary: List all countries
      description: Retrieves a list of all available countries
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success message
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CountryResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"



components:
  schemas:
    BookingRequest:
      type: object
      required:
        - departure_date
        - package_specifications
      properties:
        title:
          type: string
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        full_name:
          type: string
          minLength: 1
          maxLength: 200
        pax:
          type: integer
          minimum: 1
        email:
          type: string
          format: email
          description: Required if `booking_id` is not provided.
        phone:
          type: string
          pattern: '^\+\d{1,3}\d{1,14}$'
        booking_id:
          type: string
          minLength: 3
          description: Required if `email` is not provided.
        return_date:
          type: string
          format: date-time
          description: ISO 8601 return date. Must be after `departure_date`.
        departure_date:
          type: string
          format: date-time
          description: "ISO 8601 departure date. Example: '2024-12-01T00:00:00Z'."
        gender:
          type: string
          enum: ['M', 'F', 'O']
        users:
          type: array
          items:
            type: string
          description: List of user IDs associated with the booking.
        esims:
          type: array
          items:
            type: string
          description: List of eSIM IDs associated with the booking.
        locale:
          type: string
          minLength: 2
          maxLength: 5
          description: Locale or language code (e.g., "en", "nl").
        communication_options:
          type: object
          properties:
            should_send_message:
              type: boolean
            channels:
              type: array
              items:
                type: string
                enum: ['EMAIL', 'PUSH', 'SMS', 'WHATSAPP']
        package_specifications:
          type: array
          minItems: 1
          description: |
            A list of package specifications. Each entry must include a `destination`.
          items:
            type: object
            required:
              - destination
            properties:
              destination:
                type: string
                pattern: '^[A-Z]{2,3}$'
                description: "Destination code (ISO). Example: 'EN', 'NL'."
              size:
                type: string
                pattern: '^\d+(MB|GB)$'
                description: Package size (e.g., '1GB' or '500MB').
              package_id:
                type: string
                description: Identifier for the package (optional).
      description: |
        Booking request object. Either `email` or `booking_id` is required. The `departure_date` and `package_specifications` with at least one `destination` are mandatory.

    BookingResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the booking
        title:
          type: string
          description: Title
        first_name:
          type: string
          description: First name
        last_name:
          type: string
          description: Last name
        full_name:
          type: string
          description: Full name
        pax:
          type: integer
          description: Number of passengers
        email:
          type: string
          format: email
          description: Email address of the booking contact
        phone:
          type: string
          nullable: true
          description: Phone number of the booking contact
        booking_id:
          type: string
          nullable: true
          description: ID of the booking
        return_date:
          type: string
          format: date-time
          description: Return date in ISO format
        partner:
          type: string
          description: Partner ID associated with the booking
        departure_date:
          type: string
          format: date-time
          description: Departure date in ISO format
        gender:
          type: string
          enum: ["M", "F", "O"]
          description: Gender
        users:
          type: array
          items:
            type: object
          description: List of users associated with the booking
        esims:
          type: array
          items:
            type: string
          description: List of eSIM IDs associated with the booking.
        locale:
          type: string
          description: Locale of the booking
        communication_options:
          type: object
          properties:
            should_send_message:
              type: boolean
              description: Indicates if messages should be sent
            channels:
              type: array
              items:
                type: string
                enum: ["EMAIL", "PUSH", "SMS", "WHATSAPP"]
              description: List of communication channels
        promo_codes:
          type: array
          items:
            type: object
            properties:
              promo_code:
                type: string
                description: Promo code applied to the booking
              package_id:
                type: string
                description: ID of the package associated with the promo code
              package_size:
                type: string
                description: Size of the package associated with the promo code
              destination:
                type: string
                description: Destination associated with the promo code
        created_at:
          type: string
          format: date-time
          description: Creation timestamp of the booking
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp of the booking
        created_by:
          type: string
          description: Identifier of the entity that created the booking
        updated_by:
          type: string
          description: Identifier of the entity that last updated the booking
    PackageSpecification:
      type: object
      properties:
        destination:
          type: string
          pattern: "^[A-Z]{2,3}$"
          description: ISO2, ISO3, or continent code for the destination
          example: "US"
        size:
          type: string
          pattern: '^\d+(MB|GB)$'
          description: Size of the package, e.g., '500MB' or '3GB'
          example: "3GB"
      anyOf:
        - type: object
          required: ["destination", "size"]
          properties:
            destination:
              type: string
              pattern: "^[A-Z]{2,3}$"
            size:
              type: string
              pattern: '^(1|3|5) (GB)$'
      description: >
        Package specification details. If `package_id` is set, the package is directly selected.
        If `destination` and `size` are set, the appropriate package will be determined based on these parameters.
        If only `destination` is set, a strategy will be applied based on the partner's implementation to determine the correct package.
    CountryResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the country (ISO code)
          example: "NLD"
        name:
          type: string
          description: Full name of the country
          example: "string"
        imsi:
          type: integer
          nullable: true
          description: International Mobile Subscriber Identity
          example: 22
        LTE:
          type: boolean
          nullable: true
          description: Indicates if LTE is supported
          example: true
        apn:
          type: string
          nullable: true
          description: Access Point Name
          example: "string"
        global_network:
          type: string
          nullable: true
          description: Name of the global network
          example: "string"
        tier:
          type: integer
          nullable: true
          description: Indicates the tier level
          example: 2
        hubby:
          type: integer
          nullable: true
          description: Associated value, possibly a constant or identifier
          example: 4
        global_price:
          type: number
          nullable: true
          description: Price for global usage
          example: 1234
        click_count:
          type: integer
          nullable: true
          description: Number of clicks or accesses
          example: 12
        bokun_id:
          type: integer
          nullable: true
          description: Bokun platform ID
          example: 123456
    PackagesGroupedByCountryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Packages grouped by country fetched successfully."
        data:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier of the package
                label:
                  type: string
                  description: Display label for the package
                bytes:
                  type: integer
                  description: Size of the package in bytes
                country:
                  type: string
                  description: Reference to the country code
                price:
                  type: number
                  format: float
                  description: Customer-facing price of the package
                customerPrice:
                  type: number
                  format: float
                  description: Partner-facing price of the package
      example:
        success: true
        message: "Packages grouped by country fetched successfully."
        data:
          VCT:
            - id: "111111"
              label: "500 MB"
              bytes: 500170752
              country: "VCT"
              price: 1.1
              customerPrice: 0
          IDN:
            - id: "222222"
              label: "500 MB"
              bytes: 500170752
              country: "IDN"
              price: 1.2
              customerPrice: 1
          MDV:
            - id: "333333"
              label: "500 MB"
              bytes: 500170752
              country: "MDV"
              price: 1.3
              customerPrice: 2
    PackagesGroupedBySingleCountryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Packages grouped by country fetched successfully."
        data:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier of the package
                label:
                  type: string
                  description: Display label for the package
                bytes:
                  type: integer
                  description: Size of the package in bytes
                country:
                  type: string
                  description: Reference to the country code
                price:
                  type: number
                  format: float
                  description: Customer-facing price of the package
                customerPrice:
                  type: number
                  format: float
                  description: Partner-facing price of the package
      example:
        success: true
        message: "Packages grouped by country fetched successfully."
        data:
          VCT:
            - id: "111111"
              label: "500 MB"
              bytes: 500170752
              country: "VCT"
              price: 1.1
              customerPrice: 0
    PackageResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the package
          example: "1015047"
        label:
          type: string
          description: Display label for the package
          example: "2.79 GB"
        bytes:
          type: integer
          description: Size of the package in bytes
          example: 3001024512
        country:
          type: string
          description: Reference to the country document
          example: "/countries/XN"
        hidden:
          type: boolean
          description: Indicates if the package is hidden
          example: false
        price:
          type: number
          format: float
          description: Customer-facing price of the package
          example: 1850
        partner_price:
          type: number
          format: float
          description: Partner-facing price of the package
          example: 1450
        days:
          type: integer
          description: Validity of the package in days
          example: 365
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Optional success message
        data:
          type: object
          description: Main data payload
    NotFoundErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code of the error
              example: 404
            message:
              type: string
              description: Error message detailing the issue
            details:
              type: object
              nullable: true
              description: Optional additional error details
    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code of the error
              example: 400
            message:
              type: string
              description: Error message detailing the issue
            details:
              type: object
              nullable: true
              description: Optional additional error details
    UnauthorizedErrorResponse:
      type: object
      description: |
        Authentication failed with specific messages:
        - "Missing required HMAC authentication headers" - When x-api-key, x-timestamp, or x-signature are missing
        - "Request timestamp expired" - When timestamp is more than 400 minutes old or in future
        - "Invalid signature" - When HMAC signature verification fails

        HMAC Signature Generation:
        1. Create message string by concatenating:
           `${timestamp}${method}/api${path}?${queryString}`
           Example: "1678901234GET/api/bookings?perPage=10"
        2. Generate HMAC-SHA256 using your API secret
        3. Convert to hex string

        Notes:
        - Timestamp must be within 400 minutes of current time
        - API keys expire after 1 year
        - Query parameters must be included in signature if present
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code of the error
              example: 401
            message:
              type: string
              description: Error message detailing the issue
            details:
              type: object
              nullable: true
              description: Optional additional error details
    ServerErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code of the error
              example: 500
            message:
              type: string
              description: Error message detailing the issue
            details:
              type: object
              nullable: true
              description: Optional additional error details
    PaginationMeta:
      type: object
      properties:
        perPage:
          type: integer
          description: Number of items per page (minimum 1)
        hasNextPage:
          type: boolean
          description: Indicates if there are more items after this page
        hasPrevPage:
          type: boolean
          description: Indicates if there are items before this page
        nextCursor:
          type: string
          nullable: true
          description: Cursor to get the next page of results
        prevCursor:
          type: string
          nullable: true
          description: Cursor to get the previous page of results